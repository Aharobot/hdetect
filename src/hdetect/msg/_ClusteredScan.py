"""autogenerated by genpy from hdetect/ClusteredScan.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import sensor_msgs.msg

class ClusteredScan(genpy.Message):
  _md5sum = "145510923061dc1e57710a8ddf208c5f"
  _type = "hdetect/ClusteredScan"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A message to contain all the info and the points of each laser cluster of the scan
# clusters : the actual points of the cluster
# cog : the center of gravity of each cluster
# features: the extracted features for each cluster
# cog_projected : if image is projected onto image
# image_projected : if cog is projected onto image
# detection_laser_prob : the laser scan probability
# detection_camera_prob : the laser scan probability
# detection_fusion_prob : the laser scan probability
# label: annotation for the label

sensor_msgs/PointCloud clusters
geometry_msgs/Point32 cog
std_msgs/Float32MultiArray features

bool cog_projected
bool crop_projected

int8 detection_label
float32 detection_laser_prob
float32 detection_camera_prob
float32 detection_fusion_prob

int8 label

================================================================================
MSG: sensor_msgs/PointCloud
# This message holds a collection of 3d points, plus optional additional
# information about each point.

# Time of sensor data acquisition, coordinate frame ID.
Header header

# Array of 3d points. Each Point32 should be interpreted as a 3d point
# in the frame given in the header.
geometry_msgs/Point32[] points

# Each channel should have the same number of elements as points array,
# and the data in each channel should correspond 1:1 with each point.
# Channel names in common practice are listed in ChannelFloat32.msg.
ChannelFloat32[] channels

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: sensor_msgs/ChannelFloat32
# This message is used by the PointCloud message to hold optional data
# associated with each point in the cloud. The length of the values
# array should be the same as the length of the points array in the
# PointCloud, and each value should be associated with the corresponding
# point.

# Channel names in existing practice include:
#   "u", "v" - row and column (respectively) in the left stereo image.
#              This is opposite to usual conventions but remains for
#              historical reasons. The newer PointCloud2 message has no
#              such problem.
#   "rgb" - For point clouds produced by color stereo cameras. uint8
#           (R,G,B) values packed into the least significant 24 bits,
#           in order.
#   "intensity" - laser or pixel intensity.
#   "distance"

# The channel name should give semantics of the channel (e.g.
# "intensity" instead of "value").
string name

# The values array should be 1-1 with the elements of the associated
# PointCloud.
float32[] values

================================================================================
MSG: std_msgs/Float32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float32[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding bytes at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.
================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
"""
  __slots__ = ['clusters','cog','features','cog_projected','crop_projected','detection_label','detection_laser_prob','detection_camera_prob','detection_fusion_prob','label']
  _slot_types = ['sensor_msgs/PointCloud','geometry_msgs/Point32','std_msgs/Float32MultiArray','bool','bool','int8','float32','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       clusters,cog,features,cog_projected,crop_projected,detection_label,detection_laser_prob,detection_camera_prob,detection_fusion_prob,label

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClusteredScan, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.clusters is None:
        self.clusters = sensor_msgs.msg.PointCloud()
      if self.cog is None:
        self.cog = geometry_msgs.msg.Point32()
      if self.features is None:
        self.features = std_msgs.msg.Float32MultiArray()
      if self.cog_projected is None:
        self.cog_projected = False
      if self.crop_projected is None:
        self.crop_projected = False
      if self.detection_label is None:
        self.detection_label = 0
      if self.detection_laser_prob is None:
        self.detection_laser_prob = 0.
      if self.detection_camera_prob is None:
        self.detection_camera_prob = 0.
      if self.detection_fusion_prob is None:
        self.detection_fusion_prob = 0.
      if self.label is None:
        self.label = 0
    else:
      self.clusters = sensor_msgs.msg.PointCloud()
      self.cog = geometry_msgs.msg.Point32()
      self.features = std_msgs.msg.Float32MultiArray()
      self.cog_projected = False
      self.crop_projected = False
      self.detection_label = 0
      self.detection_laser_prob = 0.
      self.detection_camera_prob = 0.
      self.detection_fusion_prob = 0.
      self.label = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.clusters.header.seq, _x.clusters.header.stamp.secs, _x.clusters.header.stamp.nsecs))
      _x = self.clusters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.clusters.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusters.points:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      length = len(self.clusters.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusters.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.values))
      _x = self
      buff.write(_struct_3f.pack(_x.cog.x, _x.cog.y, _x.cog.z))
      length = len(self.features.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.features.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.size, _x.stride))
      buff.write(_struct_I.pack(self.features.layout.data_offset))
      length = len(self.features.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.features.data))
      _x = self
      buff.write(_struct_2Bb3fb.pack(_x.cog_projected, _x.crop_projected, _x.detection_label, _x.detection_laser_prob, _x.detection_camera_prob, _x.detection_fusion_prob, _x.label))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.clusters is None:
        self.clusters = sensor_msgs.msg.PointCloud()
      if self.cog is None:
        self.cog = geometry_msgs.msg.Point32()
      if self.features is None:
        self.features = std_msgs.msg.Float32MultiArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.clusters.header.seq, _x.clusters.header.stamp.secs, _x.clusters.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clusters.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.clusters.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusters.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.clusters.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusters.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = struct.unpack(pattern, str[start:end])
        self.clusters.channels.append(val1)
      _x = self
      start = end
      end += 12
      (_x.cog.x, _x.cog.y, _x.cog.z,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.features.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
        self.features.layout.dim.append(val1)
      start = end
      end += 4
      (self.features.layout.data_offset,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.features.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.cog_projected, _x.crop_projected, _x.detection_label, _x.detection_laser_prob, _x.detection_camera_prob, _x.detection_fusion_prob, _x.label,) = _struct_2Bb3fb.unpack(str[start:end])
      self.cog_projected = bool(self.cog_projected)
      self.crop_projected = bool(self.crop_projected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.clusters.header.seq, _x.clusters.header.stamp.secs, _x.clusters.header.stamp.nsecs))
      _x = self.clusters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.clusters.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusters.points:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      length = len(self.clusters.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusters.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
      _x = self
      buff.write(_struct_3f.pack(_x.cog.x, _x.cog.y, _x.cog.z))
      length = len(self.features.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.features.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.size, _x.stride))
      buff.write(_struct_I.pack(self.features.layout.data_offset))
      length = len(self.features.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.features.data.tostring())
      _x = self
      buff.write(_struct_2Bb3fb.pack(_x.cog_projected, _x.crop_projected, _x.detection_label, _x.detection_laser_prob, _x.detection_camera_prob, _x.detection_fusion_prob, _x.label))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.clusters is None:
        self.clusters = sensor_msgs.msg.PointCloud()
      if self.cog is None:
        self.cog = geometry_msgs.msg.Point32()
      if self.features is None:
        self.features = std_msgs.msg.Float32MultiArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.clusters.header.seq, _x.clusters.header.stamp.secs, _x.clusters.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clusters.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.clusters.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusters.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.clusters.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusters.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.clusters.channels.append(val1)
      _x = self
      start = end
      end += 12
      (_x.cog.x, _x.cog.y, _x.cog.z,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.features.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
        self.features.layout.dim.append(val1)
      start = end
      end += 4
      (self.features.layout.data_offset,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.features.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 16
      (_x.cog_projected, _x.crop_projected, _x.detection_label, _x.detection_laser_prob, _x.detection_camera_prob, _x.detection_fusion_prob, _x.label,) = _struct_2Bb3fb.unpack(str[start:end])
      self.cog_projected = bool(self.cog_projected)
      self.crop_projected = bool(self.crop_projected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2Bb3fb = struct.Struct("<2Bb3fb")
_struct_3f = struct.Struct("<3f")
_struct_2I = struct.Struct("<2I")
